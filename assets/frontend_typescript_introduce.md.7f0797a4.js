import{_ as e,c as t,o as a,R as r}from"./chunks/framework.efe0f0ba.js";const f=JSON.parse('{"title":"导读","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/typescript/introduce.md","filePath":"frontend/typescript/introduce.md","lastUpdated":null}'),i={name:"frontend/typescript/introduce.md"},o=r('<h1 id="导读" tabindex="-1">导读 <a class="header-anchor" href="#导读" aria-label="Permalink to &quot;导读&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>TypeScript 是 JavaScript 的超集，它是基于 JavaScript 开发的，包含 js 的所有元素，完全兼容 js 代码，支持 Es 语法。是一种开源，跨平台的编程语言。添加了类型系统的 JavaScript，适用于任何规模的项目。同时 ts 具有编译器编译为 js 代码，js 解析器执行，还拥有静态类型检查器，更加严格的语法，减少运行时异常出现的几率，后期维护更加的方便。</p><h2 id="为什么需要-typescript" tabindex="-1">为什么需要 TypeScript <a class="header-anchor" href="#为什么需要-typescript" aria-label="Permalink to &quot;为什么需要 TypeScript&quot;">​</a></h2><p>由于 JavaScript 的一些不足之处，时不时就会带来一个小问题，比如隐式转换，精度丢失，没有类型，想知道这个变量是什么值只能靠一个一个 console.log 查看，而 TypeScript 的类型系统可以在编码的阶段通过静态分析检测出很多常见的问题，例如定义了一个字符串，却给它赋值数字，或者是一个函数接收布尔值的参数，却传入了字符串类型等等。这将减少了运行的的错误频率，也让开发者们在开发项目中更加的有信心。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/qq1195566313?type=blog" target="_blank" rel="noreferrer">小满zs</a> CSDN 博客</li><li><a href="https://juejin.cn/user/782508012077678" target="_blank" rel="noreferrer">林不渡</a> 掘金小册</li><li><a href="http://ts.xcatliu.com/" target="_blank" rel="noreferrer">TypeScript</a> 入门教程</li></ul>',7),n=[o];function c(s,l,p,d,h,_){return a(),t("div",null,n)}const S=e(i,[["render",c]]);export{f as __pageData,S as default};
