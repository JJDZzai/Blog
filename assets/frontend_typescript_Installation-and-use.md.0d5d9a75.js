import{_ as s,c as a,o as n,R as e}from"./chunks/framework.efe0f0ba.js";const l="/Blog/assets/set.5d12a394.png",p="/Blog/assets/ts-config.2d4fe06b.png",o="/Blog/assets/hints.e73b3d4e.png",t="/Blog/assets/code.ede7bc10.png",D=JSON.parse('{"title":"开发环境搭建","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/typescript/Installation-and-use.md","filePath":"frontend/typescript/Installation-and-use.md","lastUpdated":null}'),r={name:"frontend/typescript/Installation-and-use.md"},c=e(`<h1 id="开发环境搭建" tabindex="-1">开发环境搭建 <a class="header-anchor" href="#开发环境搭建" aria-label="Permalink to &quot;开发环境搭建&quot;">​</a></h1><h2 id="命令行工具安装" tabindex="-1">命令行工具安装 <a class="header-anchor" href="#命令行工具安装" aria-label="Permalink to &quot;命令行工具安装&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>安装 TypeScript 的同时会一起安装 <code>tsc</code> ，它是 <code>TypeScript</code> 提供的编译工具。安装完成后，可以在任何地方执行此命令。</p></blockquote><h2 id="检查-typescript-是否安装成功-执行以下命令" tabindex="-1">检查 TypeScript 是否安装成功，执行以下命令 <a class="header-anchor" href="#检查-typescript-是否安装成功-执行以下命令" aria-label="Permalink to &quot;检查 TypeScript 是否安装成功，执行以下命令&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>出现版本号 Version ··· 即安装成功。</p></blockquote><h2 id="编译文件" tabindex="-1">编译文件 <a class="header-anchor" href="#编译文件" aria-label="Permalink to &quot;编译文件&quot;">​</a></h2><p>编译一个 TypeScript 文件很简单，当编写完一段代码，此时需要执行它，获取到结果，但 ts 并不像 js 那样，通常会使用浏览器控制台或 Node.Js 来执行，而是需要先编译后执行，也就是使用 tsc 进行编译，把 ts 文件编译为 js 文件后执行。</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> yourFriend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Zzai</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(yourFriend)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>执行以下命令编译：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译完成后，生成 index.js 文件，其内容是这样的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> yourFriend </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Zzai</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(yourFriend)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>输入以下命令执行程序：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需要提到的是，每次编写完代码都是手动执行命令去编译，希望在保存文件时，自动编译为 js 文件，那么就需要执行第二种命令，每次更新自动编译。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-w</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>还可以使用来自社区的 npm 包 <code>esno</code> 执行，直接输出结果。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">esno</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>简单地说，esno 也是先编译再执行的过程，只不过它底层使用的是快如闪电的 ESBuild 进行编译，所以使用它来执行 TS 文件，几乎感觉不到编译的过程。</p></blockquote><h2 id="node-js-环境执行-ts" tabindex="-1">Node.js 环境执行 ts <a class="header-anchor" href="#node-js-环境执行-ts" aria-label="Permalink to &quot;Node.js 环境执行 ts&quot;">​</a></h2><p>安装 ts-node 工具包，不需要编译，即可执行命令输出结果。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tslib</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@types/node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--save-dev</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># node 环境支持的依赖，必装</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ts-node</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 执行环境，把 ts 编译为 js，然后在 node 上运行</span></span>
<span class="line"><span style="color:#FFCB6B;">ts-node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.ts</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;"># 执行程序</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>验证是否安装成功命令</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">ts-node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 查看 ts-node 版本信息</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>ts-node 工具包在内部将 ts =&gt; js，然后 Node.js 再运行 js 代码</p></blockquote><h2 id="编辑器" tabindex="-1">编辑器 <a class="header-anchor" href="#编辑器" aria-label="Permalink to &quot;编辑器&quot;">​</a></h2><p>TypeScript 最大的优势之一便是增强了编辑器和 IDE 的功能，包括代码补全、接口提示、跳转到定义、重构等。</p><p>主流的编辑器都支持 TypeScript，推荐使用 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> 作为一个使用 TypeScript 开发的代码编辑器，它是一款开源，跨终端的轻量级编辑器，内置了非常全面的 TypeScript 支持，如类型检查，代码提示，自动补全等等，基本高频使用的功能都无需配置就能开箱即用。</p><h3 id="开启配置" tabindex="-1">开启配置 <a class="header-anchor" href="#开启配置" aria-label="Permalink to &quot;开启配置&quot;">​</a></h3><p>对于 VS Code 中的设置，内置的 TypeScript 支持能力并没有全部启用，有一些能力需要通过额外的设置开启，当然，之所以这些配置没有被默认启用，就是因为不同的开发者对这些能力的喜好是不同的。下面介绍的配置项中，可以根据它们的实际效果自行调节。</p><p>首先，通过 Ctrl(Command) + Shift + P 打开命令面板，找到「打开工作区设置」这一项。</p><p><img src="`+l+'" alt="set"></p><p>在打开的设置中输入 typescript，筛选出所有 TypeScript 有关的配置，点击左侧的&quot;TypeScript&quot;，这里才是官方内置的配置。</p><p><img src="'+p+'" alt="ts-config"></p><p>补全搜索词，使用“typescript inlay hints”</p><p><img src="'+o+'" alt="hints"></p><p>推荐开启的配置项主要是这几个：</p><ul><li>Function Like Return Types，显示推导得到的函数返回值类型；</li><li>Parameter Names，显示函数入参的名称；</li><li>Parameter Types，显示函数入参的类型；</li><li>Variable Types，显示变量的类型；</li></ul><p>而启用后的效果则是这样的：</p><p><img src="'+t+'" alt="code"></p><p>这些配置的主要能力就是把参数名，参数类型，以及推导得到的类型等等信息直接展示在屏幕上，否则就需要悬浮鼠标在代码上来查看这些信息了。对于入门阶段的开发者来说，可以开启这些配置项来获得更清晰的类型信息。</p><h2 id="配置文件-tsconfig-json" tabindex="-1">配置文件 tsconfig.json <a class="header-anchor" href="#配置文件-tsconfig-json" aria-label="Permalink to &quot;配置文件 tsconfig.json&quot;">​</a></h2><p>TypeScript 也引入了自己的配置文件 tsconfig.json，用于进行编译等等能力的配置。</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--init</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 初始化 tsconfig.json</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',46),i=[c];function d(y,C,u,b,h,m){return n(),a("div",null,i)}const g=s(r,[["render",d]]);export{D as __pageData,g as default};
